#!/bin/sh
#
# pawl -- Super happy fun HandBrake / DVD encoding front-end
#
# 
# Copyright 2008-2011 James Kelly. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY JAMES KELLY “AS IS” AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL JAMES KELLY OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of James Kelly.
#

set -eu

if [ "$(uname)" = "SunOS" -a "$SHELL" != "/usr/xpg4/bin/sh" ]; then
	SHELL=/usr/xpg4/bin/sh
	unset ENV
	export SHELL ENV
	$SHELL "$0" "$@"
	exit $?
fi

error () {
	set +x
	echo
	echo "ERROR: $1" | fmt 1>&2
	exit ${2:-1}
}

assert () {
	set +x
	echo
	echo "ASSERT: $1" | fmt 1>&2
	exit ${2:-1}
}

curdir=$(pwd)

# This is the version of the configuration file. Bump this every time there's a
# change to the default configuration that would justify a configuration
# regeneration in existing projects.
pawl_config_version='22'

# Defaults
disable_dvdnav='No'
dvd_source='/dev/dvd'
output=''
audio_tracks='1'
audio_encoder='copy'
audio_copy_mask='all'
audio_copy_fallback='ffflac'
audio_bitrate=''
audio_mixdown=''
subtitles=''
framerate='same'
quality='16'
x264_profile=''
x264_preset='veryslow'
x264_tune='grain'
crop='auto'
anamorphic='Yes'
anamorphic_style='strict'
title='1'
chapters='all'
angle='1'
chapter_markers='Yes'
grayscale='No'
deinterlace='No'
deinterlace_params=''
decomb='No'
decomb_params=''

# Portability is a good thing™

# which: Solaris which(1) doesn't return a false error code if the command
# cannot be found.
which_cmd='which'
test "$(uname)" = "SunOS" && which_cmd='whence'

# echo: Solaris echo(1) doesn't support the -n argument.
echo_n_cmd='echo -n'
test "$(uname)" = "SunOS" && echo_n_cmd='/usr/ucb/echo -n'

# sed: How to enable extended regular expressions.
esed_cmd=''
# BSD sed, others?
# -E ?
t=$(echo '01234 aaaa hi' | sed -E 's,^([0-9]+) .+ (.+)$,\1 \2,' 2>&1) || true
test "$t" = '01234 hi' && esed_cmd='sed -E'
# GNU sed, others?
# -r ?
t=$(echo '01234 aaaa hi' | sed -r 's,^([0-9]+) .+ (.+)$,\1 \2,' 2>&1) || true
test "$t" = '01234 hi' && esed_cmd='sed -r'
# I don't believe SUNW sed supports extended regular expressions at all. At
# least my versions of Solaris do not. Other systems may be in the same boat as
# well. Try GNU sed instead.
test -z "${esed_cmd:-}" && "$which_cmd" gsed >/dev/null 2>&1 && esed_cmd='gsed -r'

if [ -z "${esed_cmd:-}" ]; then
	error "Your system doesn't have a sed command that supports extended regular expressions. If this is untrue, please report this as a bug."
fi

# Make sure we have the appropriate version of HandBrake. Is there a better way
# to check version? This is a bit silly.
has_compatible_hb=0
if "$which_cmd" HandBrakeCLI >/dev/null 2>&1; then
	hb_cmd_path=$("$which_cmd" HandBrakeCLI)
	hb_version=$(strings "$hb_cmd_path" | \
	            awk '/^HandBrake [^ ]+$/ {print $2}')
	if echo "$hb_version" | grep '^svn' >/dev/null 2>&1; then
		hb_version=$(echo "$hb_version" | sed s,^svn,,)
		if [ $hb_version -ge 4431 ]; then
			has_compatible_hb=1
		fi
		hb_version="svn${hb_version}"
	elif [ "$hb_version" = '0.9.6' ]; then
		has_compatible_hb=1
	fi

	if [ $has_compatible_hb -eq 0 ]; then
		error "Incompatible HandBrakeCLI, found version ${hb_version}."
	fi
else
	error 'Unable to find HandBrakeCLI. Is it present and in your $PATH?'
fi

has_cmd () {
	local rc
	set +e
	"$which_cmd" "$1" >/dev/null 2>&1
	rc=$?
	set -e
	return $rc
}

require_cmd () {
	if ! has_cmd "$1" ; then
		error "$1 is required for this function."
	fi
	return 0
}

do_config_migration () {
	# config_version 16 marks the introduction of HandBrake 0.9.5 which
	# changes the audio encoding options. In versions prior to HandBrake
	# 0.9.5, ac3 and dts options yielded passthrough audio encoding. Now
	# dts doesn't exist, and ac3 gives you ac3 encoding. If your source
	# audio track is already ac3, you'll re-encode the track and cause,
	# depending on your settings, a reduction in quality or an increase in
	# file size. In config_version 15 and below if you your audio encoder
	# to ac3 or dts, you're expecting passthrough. Let's honor that
	# intention. As an extra bonus, if you re-scaffold your config, this
	# adjusted setting will be written to your new config. All this is very
	# awesomely POLA.
	if [ $config_version -le 15 ]; then
		audio_encoder=$(echo "$audio_encoder" | awk '
		{
			for (i = 1; i <= NF; i++) {
				if ($i == "ac3" || $i == "dts") {
					$i = "copy"
				}
			}
			print $0
		}')
	fi
	# config_version 17 marks the introduction of HandBrake 0.9.6 which
	# introduces x264 profile/preset/tune and deprecates pawl's version of
	# the same thing.
	if [ $config_version -le 16 ]; then
		x264_profile=''
		x264_tune="$x264_preset"
		x264_preset='veryslow'
		test "$x264_tune" = 'normal' && x264_tune=''
	fi
	# config_version 18 marks the migration from percent-based quality to
	# RF.
	if [ $config_version -le 17 ]; then
		quality=$(awk -v quality="$quality" 'BEGIN { if ( quality < 1 ) print ( 1 - quality ) * 51; exit }')
	fi
}

usage () {
	local rc
	rc=${1:-0}
	echo 'Usage: pawl <option>'
	echo '       Where option is:'
	echo
	echo '       config       (Update or create project configuration file)'
	echo '       showconfig   (Show project configuration)'
	echo '       run          (run the encoding)'
	echo '       scan         (scan the DVD structure with HandBrake and tcprobe)'
	echo '       32detect     (check source for sporadic interlaced frames)'
	echo '       compare      (compare size of DVD source vs. project output)'
	echo '       extractframe (extract one or more frames. arg: f1,f2,f3-f4[,f4-f5])'
	echo '       playsrc      (Play source)'
	echo '       playout      (Play output)'
	exit $rc
}

print_config_summary () {
	echo 'General:'
	echo "  Disable dvdnav: $disable_dvdnav"
	echo 'Source:'
	echo "  DVD source: $dvd_source"
	echo "  Title: $title"
	echo "  Chapters: $chapters"
	if [ $angle -gt 1 ]; then
		echo "  Video angle: $angle"
	fi
	echo 'Destination:'
	echo "  Output filename: ${output}.${output_format}"
	echo "  Chapter markers: $chapter_markers"
	echo 'Video:'
	test -n "$x264_profile" && echo "  x264 profile: $x264_profile"
	test -n "$x264_preset"  && echo "  x264 preset: $x264_preset"
	test -n "$x264_tune"    && echo "  x264 tune: $x264_tune"
	echo "  Frame rate: $framerate"
	echo "  Quality: $quality"
	echo 'Audio:'
	echo "  Tracks: $audio_tracks"
	echo "  Encoder: $audio_encoder"
	if [ -n "${_audio_copy_enabled:-}" ]; then
		echo "  Copy mask: $audio_copy_mask"
	fi
	if [ -n "${_audio_copy_enabled:-}" -o -n "${_audio_copy_s_enabled:-}" ]; then
		echo "  Fallback encoder: $audio_copy_fallback"
	fi
	echo "  Bitrate: $audio_bitrate"
	echo "  Mixdown: $audio_mixdown"
	echo 'Picture:'
	echo "  Cropping: $crop"
	echo "  Anamorphic: $anamorphic ($anamorphic_style)"
	echo 'Filters:'
	echo "  Deinterlace: $deinterlace"
	if [ "$deinterlace" != 'No' -a -n "$deinterlace_params" ]; then
		echo "  Deinterlace params: $deinterlace_params"
	fi
	echo "  Decomb: $decomb"
	if [ "$decomb" != 'No' -a -n "$decomb_params" ]; then
		echo "  Decomb params: $decomb_params"
	fi
	echo "  Grayscale: $grayscale"
	echo 'Subtitles:'
	echo "  Subtitles: $subtitles"
}

test -z "${1:-}"         -o \
     "${1:-}" = '--help' -o \
     "${1:-}" = '-h'     -o \
     "${1:-}" = 'help'   -o \
     "${1:-}" = 'usage' && usage

# All allowable options MUST be here.
test "$1" = 'config'       -o \
     "$1" = 'showconfig'   -o \
     "$1" = 'run'          -o \
     "$1" = 'scan'         -o \
     "$1" = '32detect'     -o \
     "$1" = 'compare'      -o \
     "$1" = 'extractframe' -o \
     "$1" = 'playsrc'      -o \
     "$1" = 'playout'      || usage 1

# Scaffold
if [ "$1" = "config" ]; then
	$echo_n_cmd 'Scaffolding configuration file'
	if [ -r config ]; then
		echo ' with existing settings!!!'
		cp config config.old
		. ./config
		do_config_migration
	else
		output=${curdir##*/}
		echo '!!!'
	fi
	cat <<_EOF_ > config
#
# pawl project configuration file.
#

#
# General
#

# Do not use dvdnav for reading DVDs, use dvdread instead. Default: No
# If you have a badly-authored or damaged DVD, dvdnav may not be able to read
# it.
disable_dvdnav='$disable_dvdnav'

#
# Source
#

# Source footage. May be a directory or DVD device node. Default: /dev/dvd
dvd_source='$dvd_source'

# Title to work on. Default: 1
title='$title'

# Chapters to work on. Default: all
chapters='$chapters'

# Angle to work on. Default: 1
angle='$angle'

#
# Destination
#

# Output filename. Do not include a filename extension.
output='$output'

# Include chapter markers? [YES/NO/Yes/No/1/0] Default: Yes
# If you want to include chapter names create a file called chapters.csv in
# your project's directory and populate it with chapter names in the following
# format:
# 1,Chapter One
# 2,Chapter Two
# 3,Chapter Three
# If the chapter name contains a comma, escape it with a backslash.
chapter_markers='$chapter_markers'

#
# Video encoding
#

# Video quality (x264 rate factor). [0 - 51] Default: 16
# Lower = less compression. Scale is logarithmic. Useful values: 20-16.
# 16 is pretty much lossless and 19 scrapes the edge of most footage.
quality='$quality'

# x264 profile. [baseline/main/high/high10/high422/high444] Default: none
# Enforce the limits of an H.264 profile. Choose based on target devices. Most
# of the time you can leave this blank unless you're encoding for an embedded
# device.
x264_profile='$x264_profile'

# x264 preset. [ultrafast/superfast/veryfast/faster/fast/medium/slow/slower/veryslow/placebo] Default: none
# Compression efficiency vs. encoding speed. Set it as slow as you can handle.
# Placebo is only good for testing. Veryslow is typically what you'd want.
x264_preset='$x264_preset'

# x264 tune. [film/animation/grain/stillimage/psnr/ssim/fastdecode/zerolatency] Default: none
# Tune based on source material. psnr/ssim is for testing. film/animation/grain
# are the most useful.
x264_tune='$x264_tune'

# Video framerate. [same/5/10/12/15/23.976/24/25/29.97] Default: Same as source
framerate='$framerate'

#
# Audio encoding
#

# Audio tracks to include. [int space separated or none] Default: 1
audio_tracks='$audio_tracks'

# Audio encoder. [faac/ffaac/copy:aac/ffac3/copy:ac3/copy:dts/copy:dtshd/lame/copy:mp3/vorbis/ffflac/copy] Default: copy
# If you're including multiple audio tracks and want to use a different encoder
# for some of them, list the encoders you want to use space separated, ordered
# by the audio tracks you're including. When encoding an aac, ac3, dts, or
# dtshd track, you may passthrough the audio track untouched using copy. If you
# want to passthrough certain types use copy:X. Where X can be
# aac/ac3/dts/dtshd.
audio_encoder='$audio_encoder'

# Audio copy mask. [aac/ac3/dts/dtshd/mp3] Default: all
# Set audio codecs that are permitted when the copy audio encoder option is
# specified. Space separated.
audio_copy_mask='$audio_copy_mask'

# Fallback audio encoder. [faac/ffaac/ffac3/lame/vorbis/ffflac] Default: ffflac
# Audio encoder to use when it is not possible to copy an audio track without
# re-encoding.
audio_copy_fallback='$audio_copy_fallback'

# Audio bitrate. [int space separated or blank/auto] Default: auto
# The default depends on the codec, mixdown, and samplerate. If you're
# including multiple audio tracks and want to use a different bitrate for some
# of them, list the bitrates you want to use space separated, ordered by the
# audio tracks you're including. This parameter is ignored if the track is
# copied.
audio_bitrate='$audio_bitrate'

# Audio mixdown. [mono/stereo/dpl1/dpl2/6ch or blank/auto] Default: auto
# The default depends on the source track and capabilities of the target codec.
# If using a non-passthrough audio format, you may choose your mixdown
# preference. It will be sanitized to something appropriate in the event you,
# for example, choose dpl2 on a stereo track. This parameter is ignored if the
# track is copied. Not all codecs support > 2 channels.
audio_mixdown='$audio_mixdown'

#
# Picture
#

# Video crop. [Auto/AUTO/No/NO/None/NONE/Top:Bottom:Left:Right] Default: Auto
# Adjust video cropping. Normally auto works fine. On slight occasion auto
# can't guess the appropriate values.
crop='$crop'

# Anamorphic video? [YES/NO/Yes/No/1/0] Default: Yes
anamorphic='$anamorphic'

# Anamorphic style? [strict/loose] Default: strict
# See http://trac.handbrake.fr/wiki/AnamorphicGuide
anamorphic_style='$anamorphic_style'

#
# Picture filters
#

# Which deinterlacing filter to use? [NO/No/adaptive/pullup]
deinterlace='$deinterlace'

# If you're using a deinterlacing filter (set above) you may set it's
# parameters here.
# adaptive YM:FD:MM:QP (or fast/slow/slower) default: 0:-1:-1:1
# pullup   L:R:T:B:SB:MP:FD default 1:1:4:4:0:0:-1
deinterlace_params='$deinterlace_params'

# Selectively deinterlace frames when combing is detected (32detect).
# [YES/NO/Yes/No/1/0] Default: No
# This may be also combined with the deinterlacer to catch frames that slip
# through due to field editing and such.
decomb='$decomb'

# If you're using decomb (set above) you may set it's parameters here.
# MO:ME:MT:ST:MF:BT:BX:BY:MG:VA:LA:DI:ER:NO:MD:PP:FD
# default: 391:2:3:3:2:40:16:16:10:20:20:4:2:50:24:1:-1
decomb_params='$decomb_params'

# Is your film is black and white? [YES/NO/Yes/No/1/0] Default: No
# Setting this to Yes if your film is black and white can reduce green tinge or
# rainbow shimmering in black and white encodes.
grayscale='$grayscale'

#
# Subtitle
#

# Subtitles to include. Default: none
subtitles='$subtitles'

#
# Metadata
#

# Config version. Don't mess with this
config_version='$pawl_config_version'
_EOF_
	echo 'Done.'
	exit
fi

set -x

# Read in configuration file
# Avoid an ugly warning if config_version isn't set.
config_version=0
if [ -r config ]; then
	. ./config
	do_config_migration
else
	error 'Unable to read configuration file. Aborting.'
fi

# Is config_version newer than what pawl supports?
if [ -n "$config_version" -a $config_version -gt $pawl_config_version ]; then
	error "This version of pawl is too old to support your project's configuration file. I support version $pawl_config_version, your configuration version is $config_version. Re-scaffolding your config will fix this, but you may lose features."
fi

# Ensure input and output files are defined
if [ -z "${dvd_source:-}" ]; then
	error 'dvd_source is not defined.'
fi
if [ -z "${output:-}" ]; then
	error 'output is not defined.'
fi

# Use mkv container. It supports everything.
output_format='mkv'

# Re-set some mandatory defaults if the config file blanked them out.
: ${disable_dvdnav:='No'}
: ${dvd_source:='/dev/dvd'}
: ${title:='1'}
: ${audio_tracks:='1'}
: ${audio_encoder:='copy'}
: ${audio_copy_mask:='all'}
: ${audio_copy_fallback:='fflac'}
: ${framerate:='same'}
: ${quality:='16'}
: ${crop:='auto'}
: ${angle:='1'}

# Normalize
_audio_tracks=$(echo "$audio_tracks" | sed 's/[ 	]\+/,/g')
_audio_bitrate=$(echo "$audio_bitrate" | sed 's/[ 	]\+/,/g')
_audio_mixdown=$(echo "$audio_mixdown" | sed 's/[ 	]\+/,/g')
_subtitles=$(echo "$subtitles" | sed 's/[ 	]\+/,/g')
test "$chapters" = 'all' && chapters=''

# Sanitize, these are used bare.
_audio_bitrate=$(echo "$_audio_bitrate" | $esed_cmd 's,[^A-Za-z0-9\,],,g')
_audio_mixdown=$(echo "$_audio_mixdown" | $esed_cmd 's,[^A-Za-z0-9\,],,g')

if [ -n "$chapters" ]; then
	tc_title_chapters_arg="-T ${title},${chapters}"
	if echo "$chapters" | grep '-' >/dev/null; then
		mplayer_chapters_arg="-chapter $chapters"
	else
		mplayer_chapters_arg="-chapter ${chapters}-${chapters}"
	fi
else
	tc_title_chapters_arg="-T ${title},-1"
	mplayer_chapters_arg=''
fi
if [ $angle -gt 1 ]; then
	tc_title_chapters_arg="${tc_title_chapters_arg},${angle}"
fi

# Scan mode?
if [ "$1" = 'scan' ]; then
	HandBrakeCLI -i "$dvd_source" -t 0 -v > handbrake-scan.log 2>&1
	if has_cmd tcprobe; then
		tcprobe -i "$dvd_source" \
		        -H 10 -T "$title" > tcprobe-scan.log 2>&1
	fi
	set +x
	echo 'HandBrakeCLI scan is in handbrake-scan.log'
	if has_cmd tcprobe; then
		echo 'tcprobe scan is in tcprobe-scan.log'
	fi
	exit
fi

# 32detect?
if [ "$1" = '32detect' ]; then
	require_cmd transcode
	tc_progress_off_arg=''
	if transcode --help 2>&1 | grep ' --progress_meter ' >/dev/null; then
		tc_progress_off_arg='--progress_meter 0'
	elif transcode --help 2>&1 | grep ' --progress_off ' >/dev/null; then
		tc_progress_off_arg='--progress_off'
	fi
	transcode -J 32detect=force_mode=0:verbose -M 0 -x dvd \
	          -i "$dvd_source" $tc_title_chapters_arg $tc_progress_off_arg \
	          -H 10 2>&1 | grep 'interlaced = yes' | \
	          tee interlaced_frames.log
		interlaced_frames=$($esed_cmd 's,.*\[([0-9]+)\].*,\1,' interlaced_frames.log | sort -u | xargs | sed 's/ /,/g')
		if [ -n "$interlaced_frames" ]; then
			set +x
			echo "Interlaced frames: $interlaced_frames"
		fi
	exit
fi

# compare?
if [ "$1" = 'compare' ]; then
	_dvd_source="$dvd_source"
	if [ -b "$dvd_source" ]; then
		dvd_device=$(realpath "$dvd_source")
		if ! mount | grep "^${dvd_device} on " >/dev/null 2>&1; then
			error 'DVD not present in drive. Aborting.'
		fi
		_dvd_source=$(mount | grep "^${dvd_device} on " | awk '{print $3}')
	elif [ ! -e "$dvd_source" ]; then
		error 'DVD source not present. Aborting.'
	fi
	if [ ! -f "${output}.${output_format}" ]; then
		error 'Project output file not present. Aborting.'
	fi
	set +x
	du -sh "$_dvd_source" "${output}.${output_format}"
	exit
fi

# extractframe?
if [ "$1" = 'extractframe' ]; then
	if [ -z "${2:-}" ]; then
		error 'Missing required argument: frame(s) to extract. Aborting.'
	fi

	require_cmd transcode

	# Now it gets a little tricky. transcode's frame selection options
	# aren't inclusive. That is -c 97769 won't give you a single frame, and
	# -c 97769-97770 will give you one frame (97769), not two. I think
	# that's a bit unfriendly. I'm gonna rejigger (that's the technical
	# term) things to allow inclusive frame selection and single frame
	# selection.
	p=''
	IFS=','
	set -- $2
	unset IFS
	set +x
	echo "Building framelist."
	echo "I won't spam your terminal with this part..."
	while [ $# -gt 0 ]; do
		s=$(echo $1 | awk -F- '{print $1}' | $esed_cmd 's,^0+,,')
		e=$(echo $1 | awk -F- '{print $2}' | $esed_cmd 's,^0+,,')
		if [ -n "$e" ]; then
			e=$((e+1))
		else
			e=$((s+1))
		fi
		test -z "$p" || p="${p},"
		p="${p}${s}-${e}"
		shift
	done
	set -x

	transcode -M 0 -x dvd \
	          -i "$dvd_source" $tc_title_chapters_arg \
	          -H 10 -c $p -y jpg,null -o frame
	exit
fi

# play source?
if [ "$1" = 'playsrc' ]; then
	require_cmd mplayer
	mplayer -dvd-device "$dvd_source" $mplayer_chapters_arg dvd://"${title}"
	exit
fi

# play output?
if [ "$1" = 'playout' ]; then
	require_cmd mplayer
	mplayer "${output}.${output_format}"
	exit
fi

# Disable dvdnav?
case "$disable_dvdnav" in
	[yY][eE][sS])
	_disable_dvdnav_arg='--no-dvdnav'
	disable_dvdnav='Yes'
	;;
	*)
	_disable_dvdnav_arg=''
	disable_dvdnav='No'
	;;
esac

# Cropping?
case "$crop" in
	[nN][oO])
	_crop_arg="--crop=0:0:0:0"
	crop='No'
	;;
	[nN][oO][nN][eE])
	_crop_arg="--crop=0:0:0:0"
	crop='No'
	;;
	[aA][uU][tT][oO])
	_crop_arg=''
	crop='Yes (Auto)'
	;;
	*)
	_crop_arg="--crop=${crop}"
	crop="Yes ($crop)"
	;;
esac

# Anamorphic?
case "$anamorphic" in
	[nN][oO])
	_anamorphic_arg=''
	anamorphic='No'
	;;
	0)
	_anamorphic_arg=''
	anamorphic='No'
	;;
	*)
	anamorphic='Yes'
	if [ -n "$anamorphic_style" -a "$anamorphic_style" = 'loose' ]; then
		_anamorphic_arg='--loose-anamorphic'
		anamorphic_style='Loose'
	else
		_anamorphic_arg='--strict-anamorphic'
		anamorphic_style='Strict'
	fi
	;;
esac

# Chapters?
_chapter_arg=''
if [ -n "$chapters" ]; then
	_chapter_arg="-c $chapters"
else
	chapters='All'
fi

# Chapter markers?
case "$chapter_markers" in
	[nN][oO])
	_chapter_markers_arg=''
	chapter_markers='No'
	;;
	0)
	_chapter_markers_arg=''
	chapter_markers='No'
	;;
	*)
	chapter_markers='Yes'
	_chapter_markers_arg='--markers='
	_chapter_markers_filename="${curdir}/chapters.csv"
	;;
esac

# Framerate
_framerate_arg=''
if [ "$framerate" = 'same' ]; then
	framerate='Same as source'
else
	_framerate_arg="--rate $framerate"
fi

# Angle?
_angle_arg=''
if [ "$angle" -gt 1 ]; then
	_angle_arg="--angle $angle"
fi

# Subtitles?
_subtitle_arg=''
if [ -n "$_subtitles" ]; then
	_subtitle_arg="-s $_subtitles"
else
	subtitles='None'
fi

# Grayscale?
case "$grayscale" in
	[yY][eE][sS])
	_grayscale_arg='--grayscale'
	grayscale='Yes'
	;;
	1)
	_grayscale_arg='--grayscale'
	grayscale='Yes'
	;;
	*)
	grayscale='No'
	_grayscale_arg=''
	;;
esac

# Deinterlacing
case "$deinterlace" in
	[aA][dD][aA][pP][tT][iI][vV][eE])
	_deinterlace_arg='--deinterlace'
	;;
	[pP][uU][lL][lL][uU][pP])
	_deinterlace_arg='--detelecine'
	;;
	*)
	_deinterlace_arg=''
	deinterlace='No'
	;;
esac

if [ "$deinterlace" != 'No' -a -n "$deinterlace_params" ]; then
	_deinterlace_arg="$_deinterlace_arg=${deinterlace_params}"
fi

# Decombing
case "$decomb" in
	[yY][eE][sS])
	_decomb_arg='--decomb'
	decomb='Yes'
	;;
	1)
	_decomb_arg='--decomb'
	decomb='Yes'
	;;
	*)
	_decomb_arg=''
	decomb='No'
	;;
esac

if [ "$decomb" != 'No' -a -n "$decomb_params" ]; then
	_decomb_arg="$_decomb_arg=${decomb_params}"
fi

# Audio encoding options
audio_encoder=$(echo "$audio_encoder" | tr 'A-Z' 'a-z')
_audio_encoder=''
for e in $audio_encoder; do
	case $e in
		faac)       : ;;
		ffaac)      : ;;
		copy:aac)   _audio_copy_s_enabled=1 ;;
		ffac3)      : ;;
		copy:ac3)   _audio_copy_s_enabled=1 ;;
		copy:dts)   _audio_copy_s_enabled=1 ;;
		copy:dtshd) _audio_copy_s_enabled=1 ;;
		lame)       : ;;
		copy:mp3)   _audio_copy_s_enabled=1 ;;
		vorbis)     : ;;
		ffflac)     : ;;
		copy)       _audio_copy_enabled=1   ;;
		*)
		error "Unknown audio_encoder option: ${e}."
		;;
	esac
	_audio_encoder="${_audio_encoder},${e}"
done
_audio_encoder="${_audio_encoder#,}"

# Audio copy mask options
_audio_copy_mask_arg=''
if [ -n "${_audio_copy_enabled:-}" ]; then
	audio_copy_mask=$(echo "$audio_copy_mask" | tr 'A-Z' 'a-z')
	_audio_copy_mask=''
	if [ "$audio_copy_mask" != 'all' ]; then
		for m in $audio_copy_mask; do
			case $m in
				aac)   : ;;
				ac3)   : ;;
				dts)   : ;;
				dtshd) : ;;
				mp3)   : ;;
				all)
				error 'audio_copy_mask option all is mutually exclusive with the others.'
				;;
				*)
				error "Unknown audio_copy_mask option: ${m}."
				;;
			esac
			_audio_copy_mask="${_audio_copy_mask},${m}"
		done
		_audio_copy_mask_arg="--audio-copy-mask=${_audio_copy_mask#,}"
	fi
fi

# Audio copy fallback options
_audio_copy_fallback_arg=''
if [ -n "${_audio_copy_enabled:-}" -o -n "${_audio_copy_s_enabled:-}" ]; then
	audio_copy_fallback=$(echo "$audio_copy_fallback" | tr 'A-Z' 'a-z')
	case "$audio_copy_fallback" in
		faac)   : ;;
		ffaac)  : ;;
		ffac3)  : ;;
		lame)   : ;;
		vorbis) : ;;
		ffflac) : ;;
		'')     : ;;
		*)
		error "Unknown audio_copy_fallback option: ${audio_copy_fallback}."
	esac
	if [ -n "$audio_copy_fallback" ]; then
		_audio_copy_fallback_arg="--audio-fallback=$audio_copy_fallback"
	fi
fi

# Audio bitrate options
_audio_bitrate_arg=''
if [ -n "$audio_bitrate" ]; then
	_audio_bitrate_arg="-B $_audio_bitrate"
else
	audio_bitrate='Auto'
fi

# Audio mixdown options
_audio_mixdown_arg=''
if [ -n "$audio_mixdown" ]; then
	_audio_mixdown_arg="-6 $_audio_mixdown"
else
	audio_mixdown='Auto'
fi

# x264 options
_x264_args=''
x264_profile=$(echo "$x264_profile" | tr 'A-Z' 'a-z')
x264_preset=$(echo "$x264_preset" | tr 'A-Z' 'a-z')
x264_tune=$(echo "$x264_tune"  | tr 'A-Z' 'a-z')

case "$x264_profile" in
	baseline) : ;;
	main)     : ;;
	high)     : ;;
	high10)   : ;;
	high422)  : ;;
	high444)  : ;;
	'')       : ;;
	*)
	error 'Unknown x264_profile option.'
	;;
esac
if [ -n "$x264_profile" ]; then
	_x264_args="$_x264_args --x264-profile=$x264_profile"
fi

case "$x264_preset" in
	ultrafast) : ;;
	superfast) : ;;
	veryfast)  : ;;
	faster)    : ;;
	fast)      : ;;
	medium)    : ;;
	slow)      : ;;
	slower)    : ;;
	veryslow)  : ;;
	placebo)   : ;;
	'')        : ;;
	*)
	error 'Unknown x264_preset option.'
	;;
esac
if [ -n "$x264_preset" ]; then
	_x264_args="$_x264_args --x264-preset=$x264_preset"
fi

case "$x264_tune" in
	film)        : ;;
	animation)   : ;;
	grain)       : ;;
	stillimage)  : ;;
	psnr)        : ;;
	ssim)        : ;;
	fastdecode)  : ;;
	zerolatency) : ;;
	'')          : ;;
	*)
	error 'Unknown x264_tune option.'
	;;
esac
if [ -n "$x264_tune" ]; then
	_x264_args="$_x264_args --x264-tune=$x264_tune"
fi

if [ "$1" = 'showconfig' ]; then
	set +x
	print_config_summary
	exit
fi

# Assertion: If we're this far, we're running a project. Make sure the user
# asked for this.
if [ "$1" != 'run' ]; then
	assert 'Fell through option handling logic.'
fi

# Create chapters.csv if needed.
if [ "$chapter_markers" = 'Yes' -a ! -f 'chapters.csv' ]; then
	if has_cmd tcprobe; then
		_number_of_chapters=$(tcprobe -i "$dvd_source" -H 10 -T "$title" 2>&1 | grep ' DVD title ' | $esed_cmd 's,.*: ([0-9]+) chapter.*,\1,')
		c=1
		while [ $c -le $_number_of_chapters ]; do
			echo "$c,Chapter $c" >> chapters.csv
			c=$(($c+1))
		done
	else
		touch chapters.csv
	fi
fi

if test -f work.log && "$which_cmd" savelog >/dev/null 2>&1; then
	savelog work.log
fi

set +x
(
echo
echo '*******************************************************************************'
print_config_summary
echo '*******************************************************************************'
echo
) | tee work.log
set -x

# Should we suggest a config update?
: ${config_version:=0}
if [ $pawl_config_version -gt $config_version ]; then
	set +x
	echo '*******************************************************************************'
	echo "WARNING: pawl configuration version is newer than the one you're using,"
	echo "you may want to re-scaffold."
	echo '*******************************************************************************'
	set -x
fi

HandBrakeCLI	$_disable_dvdnav_arg \
		-i "$dvd_source" \
		-f "${output_format}" \
		-o "${output}.${output_format}" \
		-t "$title" \
		-e x264 \
		$_x264_args \
		$_crop_arg \
		$_anamorphic_arg \
		-a "$_audio_tracks" -E "$_audio_encoder" \
		$_audio_copy_mask_arg \
		$_audio_copy_fallback_arg \
		$_audio_bitrate_arg \
		$_audio_mixdown_arg \
		$_framerate_arg \
		-q "$quality" \
		$_chapter_arg \
		${_chapter_markers_arg}"${_chapter_markers_filename}" \
		${_angle_arg} \
		$_subtitle_arg \
		$_grayscale_arg \
		$_deinterlace_arg \
		$_decomb_arg 2>&1 | tee -a work.log

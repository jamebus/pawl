#!/bin/sh
#
# $Id: pawl,v 1.49 2010/10/19 00:36:16 bus Exp bus $
#

set -e

# Compatibility hack for legacy configuration files.  It's easier than
# maintaining the legacy configuration code alongside the new.  Especially
# since there's only a small number of projects using the old format.
if [ -n "$scaffolding" ]; then
	sed -i 's,^. ../../etc/hb$,,' config
	env legacy_scaffold=1 $0 config
	exit
fi

# This is the version of the configuration file.  Bump this every time there's
# a change to the default configuration that would justify a configuration
# regeneration in existing projects.
pawl_config_version='14'

# Defaults
dvd_source='/dev/dvd'
output=''
audio_tracks='1'
audio_encoder='ac3'
audio_bitrate='160'
subtitles=''
framerate='same'
quality='0.68'
x264_preset='grain'
crop='auto'
anamorphic='Yes'
anamorphic_style='strict'
title='1'
chapters='all'
angle='1'
chapter_markers='Yes'
grayscale='No'
deinterlace='No'
deinterlace_params=''
decomb='No'
decomb_params=''

# Portability is a good thingâ„¢

# sed: How to enable extended regular expressions.
esed_cmd=''
# BSD sed, others?
# -E ?
t=`echo '01234 aaaa hi' | sed -E 's,^([0-9]+) .+ (.+)$,\1 \2,' 2>&1` || true
test "$t" = '01234 hi' && esed_cmd='sed -E'
# GNU sed, others?
# -r ?
t=`echo '01234 aaaa hi' | sed -r 's,^([0-9]+) .+ (.+)$,\1 \2,' 2>&1` || true
test "$t" = '01234 hi' && esed_cmd='sed -r'
# I don't believe SUNW sed supports extended regular expressions at all.  At
# least my versions of Solaris do not.  Other systems may be in the same boat
# as well.  Try GNU sed instead.
test -z "$esed_cmd" && which gsed >/dev/null 2>&1 && esed_cmd='gsed -r'

if [ -z "$esed_cmd" ]; then
	echo "ERROR: Your system doesn't have a sed command that supports extended" 1>&2
	echo "regular expressions.  If this is untrue, please report this as a bug." 1>&2
	exit 1
fi

# Usage
if [ -z "$1" ]; then
	echo 'Usage: pawl <option>'
	echo '       Where option is:'
	echo
	echo '       config       (Update or create project configuration file)'
	echo '       run          (run the encoding)'
	echo '       scan         (scan the DVD structure with HandBrake and tcprobe)'
	echo '       32detect     (check source for sporadic interlaced frames)'
	echo '       compare      (compare size of DVD source vs. project output)'
	echo '       extractframe (extract one or more frames.  arg: f1,f2,f3-f4[,f4-f5])'
	exit
fi

# Scaffold
if [ "$1" = "config" ]; then
	scaffolding=1
	if [ -z "$legacy_scaffold" ]; then
		echo -n 'Scaffolding configuration file'
	fi

	if [ -r run -a ! -r config ]; then
		mv run config
		rm -f run.old
	fi

	if [ -r config ]; then
		if [ -z "$legacy_scaffold" ]; then
			echo ' with existing settings!!!'
		fi
		cp config config.old
		. ./config
	else
		echo ' !!!'
	fi
	cat <<_EOF_ > config
# Source footage.  May be a directory or DVD device node.  Default: /dev/dvd
dvd_source='$dvd_source'

# Output filename.  Do not include a filename extension.
output='$output'

# Audio tracks to include.  [int space separated or none] Default: 1
audio_tracks='$audio_tracks'

# Audio encoder.  [faac/lame/vorbis/ac3/dts] Default: ac3
# If you're including multiple audio tracks and want to use a different encoder
# for some of them, list the encoders you want to use space separated, ordered
# by the audio tracks you're including.
audio_encoder='$audio_encoder'

# Audio bitrate.  [int space separated or none] Default: 160
# If you're including multiple audio tracks and want to use a different bitrate
# for some of them, list the bitrates you want to use space separated, ordered
# by the audio tracks you're including.  This parameter is ignored if the track
# is ac3 passthrough, it is used for faac/lame/vorbis.
audio_bitrate='$audio_bitrate'

# Subtitles to include.  Default: none
subtitles='$subtitles'

# Video framerate.  [same/5/10/12/15/23.976/24/25/29.97] Default: Same as source
framerate='same'

# Video quality.  [0.0 - 1.0] Default: 0.68
quality='$quality'

# x264 preset.  [normal/film/grain/animation] Default: grain
# Optimize video encoding based on your source material and/or needs.
# Normal    - x264 high profile defaults.
# Film      - Optimize for film content.
# Grain     - Optimize for grainy content (will retain grain/fine details).
# Animation - Optimize for animated content.
x264_preset="$x264_preset"

# Video crop.  [Auto/AUTO/No/NO/None/NONE/Top:Bottom:Left:Right] Default: Auto
# Adjust video cropping.  Normally auto works fine.  On slight occasion auto
# can't guess the appropriate values.
crop='$crop'

# Anamorphic video?  [YES/NO/Yes/No/1/0] Default: Yes
anamorphic='$anamorphic'

# Anamorphic style?  [strict/loose] Default: strict
# See http://trac.handbrake.fr/wiki/AnamorphicGuide
anamorphic_style='$anamorphic_style'

# Title to work on.  Default: 1
title='$title'

# Chapters to work on.  Default: all
chapters='$chapters'

# Angle to work on.  Default: 1
angle='$angle'

# Include chapter markers?  [YES/NO/Yes/No/1/0] Default: Yes
# If you want to include chapter names create a file called chapters.csv in
# your project's directory and populate it with chapter names in the following
# format:
# 1,Chapter One
# 2,Chapter Two
# 3,Chapter Three
# If the chapter name contains a comma, escape it with a backslash.
chapter_markers='$chapter_markers'

# Is your film is black and white?  [YES/NO/Yes/No/1/0] Default: No
# Setting this to Yes if your film is black and white can reduce green tinge or
# rainbow shimmering in black and white encodes.
grayscale='$grayscale'

# Which deinterlacing filter to use?  [NO/No/adaptive/pullup]
deinterlace='$deinterlace'

# If you're using a deinterlacing filter (set above) you may set it's
# parameters here.
# adaptive YM:FD:MM:QP (or fast/slow/slower) default: 0:-1:-1:1
# pullup   L:R:T:B:SB:MP:FD default 1:1:4:4:0:0:-1
deinterlace_params='$deinterlace_params'

# Selectively deinterlace frames when combing is detected (32detect).
# [YES/NO/Yes/No/1/0] Default: No
# This may be also combined with the deinterlacer to catch frames that slip
# through due to field editing and such.
decomb='$decomb'

# If you're using decomb (set above) you may set it's parameters here.
# MO:ME:MT:ST:BT:BX:BY:MG:VA:LA:DI:ER:NO:MD:PP:FD
# default: 7:2:6:9:80:16:16:10:20:20:4:2:50:24:1:-1
decomb_params='$decomb_params'

# Config version.  Don't mess with this
config_version='$pawl_config_version'
_EOF_
	echo 'Done.'
	exit
fi

set -x

# Read in configuration file
# Avoid an ugly warning if config_version isn't set.
config_version=0
if [ -r config ]; then
	. ./config
else
	set +x
	echo 'Unable to read configuration file.  Aborting.' 1>&2
	exit 1
fi

# Is config_version newer than what pawl supports?
if [ -n "$config_version" -a $config_version -gt $pawl_config_version ]; then
	set +x
	echo "This version of pawl is too old to support your project's configuration" 1>&2
	echo "file.  I support version $pawl_config_version, your configuration version is $config_version." 1>&2
	echo "Re-scaffolding your config will fix this, but you may lose features." 1>&2
	exit 1
fi

# Ensure input and output files are defined
if [ -z "$dvd_source" ]; then
	set +x
	echo "ERROR: dvd_source is not defined." 1>&2
	exit 1
fi
if [ -z "$output" ]; then
	set +x
	echo "ERROR: output is not defined." 1>&2
	exit 1
fi

#
# x264 defaults
#

# Included in all but normal
x264_options_preset_standard="
nr=0
ref=6
mixed-refs
direct=auto
bframes=3
weightb
subme=9
trellis=1
partitions=i8x8,p8x8,b8x8
8x8dct
me=umh
no-fast-pskip
b-adapt=2
rc-lookahead=60"

x264_options_preset_grain="
deblock=-2,-2
psy-rd=1.0,0.25
no-dct-decimate
ipratio=1.1
pbratio=1.1
aq-strength=0.5
deadzone-intra=6
deadzone-inter=6
qcomp=0.8"

x264_options_preset_film="
deblock=-1,-1
psy-rd=1,0.15"

x264_options_preset_animation="
ref=12
deblock=1,1
psy-rd=0.4,0
aq-strength=0.6
bframes=5"

# Use mkv container.  It supports everything.
output_format='mkv'

# Re-set some mandatory defaults if the config file blanked them out.
test -z "$dvd_source" && dvd_source='/dev/dvd'
test -z "$title" && title='1'
test -z "$audio_tracks" && audio_tracks='1'
test -z "$audio_encoder" && audio_encoder='ac3'
test -z "$audio_bitrate" && audio_bitrate='160'
test -z "$framerate" && framerate='same'
test -z "$quality" && quality='0.68'
test -z "$x264_preset" && x264_preset='grain'
test -z "$crop" && crop='auto'
test -z "$angle" && angle='1'

# Normalize
_audio_tracks=`echo $audio_tracks | sed 's/[    ]\+/,/g'`
_audio_encoder=`echo $audio_encoder | sed 's/[    ]\+/,/g'`
_audio_bitrate=`echo $audio_bitrate | sed 's/[    ]\+/,/g'`
_subtitles=`echo $subtitles | sed 's/[    ]\+/,/g'`
test "$chapters" = 'all' && chapters=''

if [ -n "$chapters" ]; then
	tc_title_chapters_arg="-T ${title},${chapters}"
else
	tc_title_chapters_arg="-T ${title},-1"
fi
if [ $angle -gt 1 ]; then
	tc_title_chapters_arg="${tc_title_chapters_arg},${angle}"
fi

# Scan mode?
if [ "$1" = 'scan' ]; then
	HandBrakeCLI -i "$dvd_source" -t 0 -v > handbrake-scan.log 2>&1
	tcprobe -i "$dvd_source" -H 10 -T "$title" > tcprobe-scan.log 2>&1
	set +x
	echo 'HandBrakeCLI scan is in handbrake-scan.log'
	echo 'tcprobe scan is in tcprobe-scan.log'
	exit
fi

# 32detect?
if [ "$1" = '32detect' ]; then
	transcode -J 32detect=force_mode=0:verbose -M 0 -x dvd \
	          -i "$dvd_source" $tc_title_chapters_arg --progress_off \
	          -H 10 2>&1 | grep 'interlaced = yes' | \
	          tee interlaced_frames.log
		interlaced_frames=`$esed_cmd 's,.*\[([0-9]+)\].*,\1,' interlaced_frames.log | sort -u | xargs | sed 's/ /,/g'`
		if [ -n "$interlaced_frames" ]; then
			set +x
			echo "Interlaced frames: $interlaced_frames"
		fi
	exit
fi

# compare?
if [ "$1" = 'compare' ]; then
	dvd_source_dir="$dvd_source"
	if [ -b "$dvd_source" ]; then
		dvd_device=`realpath "$dvd_source"`
		if ! mount | grep "^${dvd_device} on " >/dev/null 2>&1; then
			set +x
			echo 'DVD not present in drive.  Aborting.' 1>&2
			exit 1
		fi
		dvd_source_dir=`mount | grep "^${dvd_device} on " | awk '{print $3}'`
	elif [ ! -d "$dvd_source" ]; then
		set +x
		echo 'DVD source not present.  Aborting.' 1>&2
		exit 1
	fi
	if [ ! -f "${output}.${output_format}" ]; then
		set +x
		echo 'Project output file not present.  Aborting.' 1>&2
		exit 1
	fi
	set +x
	du -sh "$dvd_source_dir" "${output}.${output_format}"
	exit
fi

# extractframe?
if [ "$1" = 'extractframe' ]; then
	if [ -z "$2" ]; then
		set +x
		echo 'Missing required argument: frame(s) to extract.  Aborting.' 1>&2
		exit 1
	fi

	# Now it gets a little tricky.  transcode's frame selection options
	# aren't inclusive,  That is -c 97769 won't give you a single frame,
	# and -c 97769-97770 will give you one frame (97769), not two.  I think
	# that's a bit unfriendly.  I'm gonna rejigger (that's the technical
	# term) things to allow inclusive frame selection and single frame
	# selection.
	p=''
	IFS=','
	set -- $2
	while [ $# -gt 0 ]; do
		s=`echo $1 | awk -F- '{print $1}' | $esed_cmd 's,^0+,,'`
		e=`echo $1 | awk -F- '{print $2}' | $esed_cmd 's,^0+,,'`
		if [ -n "$e" ]; then
			e=$((e+1))
		else
			e=$((s+1))
		fi
		test -z "$p" || p="${p},"
		p="${p}${s}-${e}"
		shift
	done
	unset IFS

	transcode -M 0 -x dvd \
	          -i "$dvd_source" $tc_title_chapters_arg \
	          -H 10 -c $p -y jpg,null -o frame
	exit
fi

# If we're this far, we're running a project.  Make sure the user asked for
# this.
if [ "$1" != 'run' ]; then
	set +x
	echo 'Unknown option specified.  Aborting.' 1>&2
	exit 1
fi

# Cropping?
case "$crop" in
	[nN][oO])
	_crop_arg="--crop=0:0:0:0"
	crop='No'
	;;
	[nN][oO][nN][eE])
	_crop_arg="--crop=0:0:0:0"
	crop='No'
	;;
	[aA][uU][tT][oO])
	_crop_arg=''
	crop='Yes (Auto)'
	;;
	*)
	_crop_arg="--crop=${crop}"
	crop="Yes ($crop)"
	;;
esac

# Anamorphic?
case "$anamorphic" in
	[nN][oO])
	_anamorphic_arg=''
	anamorphic='No'
	;;
	0)
	_anamorphic_arg=''
	anamorphic='No'
	;;
	*)
	anamorphic='Yes'
	if [ -n "$anamorphic_style" -a "$anamorphic_style" = 'loose' ]; then
		_anamorphic_arg='--loose-anamorphic'
		anamorphic_style='Loose'
	else
		_anamorphic_arg='--strict-anamorphic'
		anamorphic_style='Strict'
	fi
	;;
esac

# Chapters?
_chapter_arg=''
if [ -n "$chapters" ]; then
	_chapter_arg="-c $chapters"
fi

# Chapter markers?
case "$chapter_markers" in
	[nN][oO])
	_chapter_markers_arg=''
	chapter_markers='No'
	;;
	0)
	_chapter_markers_arg=''
	chapter_markers='No'
	;;
	*)
	chapter_markers='Yes'
	_chapter_markers_arg='--markers='
	_chapter_markers_filename="`pwd`/chapters.csv"
	;;
esac

# Create chapters.csv if needed.
if [ "$chapter_markers" = 'Yes' -a ! -f 'chapters.csv' ]; then
	_number_of_chapters=`tcprobe -i "$dvd_source" -H 10 -T "$title" 2>&1 | grep ' DVD title ' | $esed_cmd 's,.*: ([0-9]+) chapter.*,\1,'`
	c=1
	while [ $c -le $_number_of_chapters ]; do
		echo "$c,Chapter $c" >> chapters.csv
		c=$(($c+1))
	done
fi

# Framerate
_framerate_arg=''
if [ "$framerate" = 'same' ]; then
	framerate='Same as source'
else
	_framerate_arg="--rate $framerate"
fi

# Angle?
_angle_arg=''
if [ "$angle" -gt 1 ]; then
	_angle_arg="--angle $angle"
fi

# Subtitles?
_subtitle_arg=''
if [ -n "$_subtitles" ]; then
	_subtitle_arg="-s $_subtitles"
fi

# Grayscale?
case "$grayscale" in
	[yY][eE][sS])
	_grayscale_arg='--grayscale'
	grayscale='Yes'
	;;
	1)
	_grayscale_arg='--grayscale'
	grayscale='Yes'
	;;
	*)
	grayscale='No'
	_grayscale_arg=''
	;;
esac

# Deinterlacing
case "$deinterlace" in
	adaptive)
	_deinterlace_arg='--deinterlace'
	;;
	pullup)
	_deinterlace_arg='--detelecine'
	;;
	*)
	_deinterlace_arg=''
	deinterlace='No'
	;;
esac

if [ "$deinterlace" != 'No' -a -n "$deinterlace_params" ]; then
	_deinterlace_arg="$_deinterlace_arg=${deinterlace_params}"
fi

# Decombing
case "$decomb" in
	[yY][eE][sS])
	_decomb_arg='--decomb'
	decomb='Yes'
	;;
	1)
	_decomb_arg='--decomb'
	decomb='Yes'
	;;
	*)
	_decomb_arg=''
	decomb='No'
	;;
esac

if [ "$decomb" != 'No' -a -n "$decomb_params" ]; then
	_decomb_arg="$_decomb_arg=${decomb_params}"
fi

# x264 options
case "$x264_preset" in
	[nN][oO][rR][mM][aA][lL])
	x264_preset='Normal'
	x264_options=''
	;;
	[fF][iI][lL][mM])
	x264_preset='Film'
	x264_options="$x264_options_preset_standard $x264_options_preset_film"
	;;
	[gG][rR][aA][iI][nN])
	x264_preset='Grain'
	x264_options="$x264_options_preset_standard $x264_options_preset_grain"
	;;
	[aA][nN][iI][mM][aA][tT][iI][oO][nN])
	x264_preset='Animation'
	x264_options="$x264_options_preset_standard $x264_options_preset_animation"
	;;
	*)
	set +x
	echo "ERROR: Unknown x264_preset, $x264_preset" 1>&2
	echo 'Aborting!' 1>&2
	exit 1
	;;
esac
_x264_options=`echo $x264_options | sed 's/[ 	]\+/:/g'`

if test -f work.log && which savelog >/dev/null 2>&1; then
	savelog work.log
fi

set +x
(
echo
echo '*******************************************************************************'
echo "DVD source: $dvd_source"
echo "Output filename: ${output}.${output_format}"
echo "Audio tracks: $audio_tracks"
echo "Audio encoder: $audio_encoder"
echo "Audio bitrate: $audio_bitrate"
echo "Subtitles: $subtitles"
echo "Frame rate: $framerate"
echo "Video quality: $quality"
echo "Video cropping: $crop"
echo "Anamorphic video: $anamorphic ($anamorphic_style)"
echo "Video title: $title"
if [ -n "$chapters" ]; then
	echo "Video chapters: $chapters"
fi
if [ $angle -gt 1 ]; then
	echo "Video angle: $angle"
fi
echo "Chapter markers: $chapter_markers"
echo "Grayscale encoding: $grayscale"
echo "Deinterlace video: $deinterlace"
if [ "$deinterlace" != 'No' -a -n "$deinterlace_params" ]; then
	echo "Deinterlace params: $deinterlace_params"
fi
echo "Decomb video: $decomb"
if [ "$decomb" != 'No' -a -n "$decomb_params" ]; then
	echo "Decomb params: $decomb_params"
fi
echo "x264 preset: $x264_preset"
echo "x264 options: $_x264_options"
echo '*******************************************************************************'
echo
) | tee work.log
set -x

# Should we suggest a config update?
test -z "$config_version" && config_version=0
if [ $pawl_config_version -gt $config_version ]; then
	set +x
	echo '*******************************************************************************'
	echo "WARNING: pawl configuration version is newer than the one you're using,"
	echo "you may want to re-scaffold."
	echo '*******************************************************************************'
	set -x
fi

HandBrakeCLI	-i "$dvd_source" \
		-f "${output_format}" \
		-o "${output}.${output_format}" \
		-t "$title" \
		-e x264 \
		$_crop_arg \
		$_anamorphic_arg \
		-a "$_audio_tracks" -E "$_audio_encoder" \
		-B "$_audio_bitrate" \
		$_framerate_arg \
		-q "$quality" \
		$_chapter_arg \
		${_chapter_markers_arg}"${_chapter_markers_filename}" \
		${_angle_arg} \
		$_subtitle_arg \
		$_grayscale_arg \
		$_deinterlace_arg \
		$_decomb_arg \
		-x "$_x264_options" 2>&1 | tee -a work.log
